port = cli.Int("port", cli.setDefault(8099), cli.setHelp("设置端口函数"))
cli.check()

routes = {}
register = (route, callback) => {
    if route in routes {
        die("Duplicated route: %v" % route)
    }
    routes[route] = callback
}

bodyEcho := (writer /* http.ResponseWriter */, req) => {
    reqBytes := http.dump(req)~
    writer.Write(poc.GetHTTPPacketBody(reqBytes))
}
register("/api/echo", bodyEcho)
register("/api/body/echo*", bodyEcho)

requestEcho = (writer, req) => {
    reqBytes := http.dump(req)~
    writer.Write(reqBytes)
}
register("/api/request/echo*", requestEcho)

syntaxChecking = (writer, req) => {
    defer fn {
        err := recover() 
        if err != nil {
            writer.Write(json.dumps({
                "ok": false,
                "reason": `%v` % err,
                "result": "",
            }))
        }
    }
    if "YaklangScriptChecking" in ssa {
        result = ssa.YaklangScriptChecking(io.ReadAll(req.Body)~, "yak")
        writer.Write(json.dumps({
            "ok": true,
            "result": result.Len() > 0 ? sdump(result) : "",
        }))
        return
    }
    writer.Write(json.dumps({
        "ok": false,
        "reason": "YaklangScriptChecking not found",
        "result": "",
    }))
}
register("/api/yak/syntax/checking*", syntaxChecking)

register("/api/test/chunk*", (rsp, req) => {
    rsp.Header().Set("transfer-encoding", "chunked")
    for in 3 {
        size = randn(10, 200)
        rsp.Write("%x" % size)
        rsp.Write("\r\n")
        rsp.Write(randstr(size))
        rsp.Write("\r\n")
        rsp.Flush()
        sleep(0.5)
    }
    rsp.Write("0\r\n\r\n")
})

c := make(chan bool)
go func {
    for {
        log.Info("start to listen on: %v", "127.0.0.1:" + sprint(port))
        err := httpserver.Serve(
            "0.0.0.0", 
            port,
            httpserver.handler((writer, req) => {
                defer recover()

                remoteAddr := req.RemoteAddr
                if remoteAddr {
                    host, _, _ = str.ParseStringToHostPort(remoteAddr)
                    if str.HasPrefix(host, "127") {
                        // 使用 nginx 配置的 X-Real-IP 或 X-Forwarded-For header
                        realIP := req.Header.Get("X-Real-IP");
                        forwardedFor := req.Header.Get("X-Forwarded-For");
                        if realIP != "" {
                            remoteAddr = realIP
                        } else if forwardedFor != "" {
                            // 取第一个IP
                            remoteAddr = str.Split(forwardedFor, ",")[0]
                        }
                    }
                }

                writer.Header().Set("Access-Control-Allow-Origin", "*")
                writer.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
                writer.Header().Set("X-Request-Remote-Addr", remoteAddr)

                path := req.RequestURI
                for k, v := range routes {
                    if str.MatchAllOfGlob(path, k) {
                        v(writer, req)
                        return
                    }
                }
                
                if req.RemoteAddr != "" {
                    writer.Header().Set("Content-Type", "text/plain")
                    host, port, err := str.ParseStringToHostPort(remoteAddr)
                    if err != nil {
                        writer.Write(remoteAddr)
                    } else {
                        writer.Write(host)
                    }
                    return
                }
                writer.Header().Set("Content-Type", "text/plain")
                writer.Write(`It works!`)
            }), 
        )
        if err != nil {
            log.Error("cannot serve (server fault): %v, retry it!", err)
        }
        sleep(1.5)
    }
}
c <- true
