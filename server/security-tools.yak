port = cli.Int("port", cli.setDefault(8099), cli.setHelp("设置端口函数"))
cli.check()

routes = {}
register = (route, callback) => {
    if route in routes {
        die("Duplicated route: %v" % route)
    }
    routes[route] = callback
}

bodyEcho := (writer /* http.ResponseWriter */, req) => {
    reqBytes := http.dump(req)~
    writer.Write(poc.GetHTTPPacketBody(reqBytes))
}
register("/api/echo", bodyEcho)
register("/api/body/echo*", bodyEcho)

requestEcho = (writer, req) => {
    reqBytes := http.dump(req)~
    writer.Write(reqBytes)
}
register("/api/request/echo*", requestEcho)

# AI Material Collection
submitAITrainingMaterial = (aiMaterial) => {
    homeDir = os.GetHomeDir()
    kbbase = [file.Join(homeDir, "yaklang-ai-kb"), file.Join(homeDir, "yaklang-ai-training-materials")]

    aikbbase = ""
    for p in kbbase {
        if file.IsExisted(p) {
            aikbbase = p
            break
        }
    }
    

    if aikbbase == "" {
        die("cannot find ai-training-materails repos")
    }
    
    log.Info("find ai-training repos: %v", aikbbase)
    os.Chdir(aikbbase)

    token = randstr(12)
    dateStr := date()
    branchName = f"doc/${dateStr}-unverified-${token}"
    log.Info("start to try branch: %v", branchName)
    resetGitToMain = `git reset --hard HEAD && git clean -fdx && (git checkout main || git checkout -f main) && git fetch origin && git reset --hard origin/main`
    submitAndPR = (ctx, content) => {
        fp = file.TempFile()~
        fp.WriteString(content)
        fp.Close()

        fname = fp.Name()
        log.Info("create temp file: %v", fname)
        assert file.IsExisted(fname)

        results, err = exec.SystemContext(ctx, `git remote -v`)
        if err != nil {
            println(string(results))
            die("BUG: cannot exec git remote -v")
        }
        

        if !str.MatchAnyOfSubString(
            string(results), 
            `github.com/yaklang/yaklang-ai-kb`, 
            `github.com/yaklang/yaklang-ai-training-materials`, 
        ) {
            println(string(results))
            die("BUG, the current script should be set in yaklang-ai-training-materials")
        }
        

        try {
            results, err = exec.SystemContext(ctx, `bash -c ` + str.Quote(resetGitToMain))
            if err != nil {
                println(string(results))
                die(err)
            }
        } catch e {
            println(string(results))
            die("BUG: cannot set main branch in git repos, reason: %v" % e)
        }


        _, _ = exec.SystemContext(
            ctx, 
            `bash -c` + str.Quote(`git branch | grep -v main | xargs git branch -D`), 
        )

        cmds = [f"git checkout -b ${branchName}", f"git checkout ${branchName}", "mkdir -p library-usage/unverified", f"cp ${fname} library-usage/unverified", "git add .", "git commit -m '[auto] add ai training materials'", f"git push origin ${branchName}", f"gh pr create --title '[Unverified] AI Training Material' --body 'This doc is created via AI, human should verify it' --repo yaklang/yaklang-ai-training-materials --head ${branchName} --base main"]

        for cmd in cmds {
            log.Info("exec cmd: %v", cmd)
            raw, err = exec.SystemContext(ctx, cmd)
            if err != nil {
                die("create and push PR failed: %#v, err: %v" % [string(raw), err])
            }
        }
    }

    ctx = context.WithTimeoutSeconds(30)
    submitAndPR(ctx, aiMaterial)
}
register("/api/ai/training/material/collect", (rsp, req) => {
    rsp.Header().Set("Content-Type", "application/json")
    try {
        data = io.ReadAll(req.Body)~
        if data == "" {
            rsp.Write(json.dumps({
                "ok": false,
                "reason": "empty body",
                "result": "",
            }))
            return
        }
        submitAITrainingMaterial(string(data))
    } catch e {
        rsp.Write(json.dumps({
            "ok": false,
            "reason": `%v` % e,
            "result": "",
        }))
        return
    }
    rsp.Write(json.dumps({
        "ok": true,
        "reason": "success",
        "result": "see: https://github.com/yaklang/yaklang-ai-training-materials/pulls",
    }))
    return
})

syntaxChecking = (writer, req) => {
    defer fn {
        err := recover() 
        if err != nil {
            writer.Write(json.dumps({
                "ok": false,
                "reason": `%v` % err,
                "result": "",
            }))
        }
    }
    if "YaklangScriptChecking" in ssa {
        result = ssa.YaklangScriptChecking(io.ReadAll(req.Body)~, "yak")
        writer.Write(json.dumps({
            "ok": true,
            "result": result.Len() > 0 ? sdump(result) : "",
        }))
        return
    }
    writer.Write(json.dumps({
        "ok": false,
        "reason": "YaklangScriptChecking not found",
        "result": "",
    }))
}
register("/api/yak/syntax/checking*", syntaxChecking)

register("/api/test/chunk*", (rsp, req) => {
    rsp.Header().Set("transfer-encoding", "chunked")
    for in 3 {
        size = randn(10, 200)
        rsp.Write("%x" % size)
        rsp.Write("\r\n")
        rsp.Write(randstr(size))
        rsp.Write("\r\n")
        rsp.Flush()
        sleep(0.5)
    }
    rsp.Write("0\r\n\r\n")
})

c := make(chan bool)
go func {
    for {
        log.Info("start to listen on: %v", "127.0.0.1:" + sprint(port))
        err := httpserver.Serve(
            "0.0.0.0", 
            port,
            httpserver.handler((writer, req) => {
                defer recover()

                remoteAddr := req.RemoteAddr
                if remoteAddr {
                    host, _, _ = str.ParseStringToHostPort(remoteAddr)
                    if str.HasPrefix(host, "127") {
                        // 使用 nginx 配置的 X-Real-IP 或 X-Forwarded-For header
                        realIP := req.Header.Get("X-Real-IP");
                        forwardedFor := req.Header.Get("X-Forwarded-For");
                        if realIP != "" {
                            remoteAddr = realIP
                        } else if forwardedFor != "" {
                            // 取第一个IP
                            remoteAddr = str.Split(forwardedFor, ",")[0]
                        }
                    }
                }

                writer.Header().Set("Access-Control-Allow-Origin", "*")
                writer.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
                writer.Header().Set("X-Request-Remote-Addr", remoteAddr)

                path := req.RequestURI
                for k, v := range routes {
                    if str.MatchAllOfGlob(path, k) {
                        v(writer, req)
                        return
                    }
                }
                
                if req.RemoteAddr != "" {
                    writer.Header().Set("Content-Type", "text/plain")
                    host, port, err := str.ParseStringToHostPort(remoteAddr)
                    if err != nil {
                        writer.Write(remoteAddr)
                    } else {
                        writer.Write(host)
                    }
                    return
                }
                writer.Header().Set("Content-Type", "text/plain")
                writer.Write(`It works!`)
            }), 
        )
        if err != nil {
            log.Error("cannot serve (server fault): %v, retry it!", err)
        }
        sleep(1.5)
    }
}
c <- true
